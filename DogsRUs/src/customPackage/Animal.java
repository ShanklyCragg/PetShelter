package customPackage;
import java.util.ArrayList;
import java.util.Comparator;

/**
 * Super class for info regarding cats and dogs
 * @author Shankly Cragg
 * @version 1.0 (16th March 2015)
 */

public abstract class Animal implements Comparable<Animal> { //Class is abstract as will never create an Animal object
	 int iD;
	 String name;
	 ArrayList<Owner> originalOwners;
	 String favFood;
	 int foodPerDay;
	
	 /**
	 * Constructor for the animal
	 * @param ID The animal's ID
	 * @param newName The animal's name
	 * @param owners A list of original owners: a copy is made
	 * @param food The kind of food it eats
	 * @param mealsPerDay Number of feeds per day 
	 */
	 public Animal(int ID, String newName, ArrayList<Owner> owners, String food, int mealsPerDay) {
		iD = ID;
		name = newName;
		originalOwners = new ArrayList<Owner>();
		
		// We make a true copy of the owners ArrayList to make sure that we
		// don't break encapsulation: i.e. don't share object references with
		// other code
		for(Owner o: owners){
			Owner copy = new Owner(o.getName(), o.getPhone());
			originalOwners.add(copy);
		}
		favFood = food;
		foodPerDay = mealsPerDay;
	}
	 
	 
	/**
	 * Returns a copy of the original owners
	 * @return A copy of the original owners as an array
	 */
	final Owner[] getOriginalOwners(){						//Methods are final as should not be edited
		Owner[] result = new Owner[originalOwners.size()];
		result = originalOwners.toArray(result);
		return result;
	}
	
	/**
	 * The animals ID he/she is known by
	 * @return The ID of the animal
	 */
	final int getID() {
		return iD;
	}
	
	/**
	 * The animals name he/she is known by
	 * @return The name of the animal
	 */
	final String getName() {
		return name;
	}
	
	/**
	 * What is the name of the animal
	 * @param newName The name of the animal
	 */
	final void setName(String newName) {
		name = newName;
	}
	
	/**
	 * The number of feeds per day the animal is fed
	 * @return The number of feeds per day
	 */
	final int getFeedsPerDay(){
		return foodPerDay;
	}
	
	/**
	 * How many times a day to feed the animal
	 * @param feeds The number of feeds per day
	 */
	final void setFeedsPerDay(int feeds){
		foodPerDay = feeds;
	}
	
	/**
	 * The food the animal likes to eat
	 * @return The food 
	 */
	final String getFavouriteFood(){
		return favFood;
	}
	
	/**
	 * What's his/her favourite food?
	 * @param food The food he/she likes
	 */
	final void setFavouriteFood(String food){
		favFood = food;
	}
	
	
	public static Comparator<Animal> AnimalNameComparator = new Comparator<Animal>() {	//Code adapted from "http://www.mkyong.com/java/java-object-sorting-example-comparable-and-comparator/"

		public int compare(Animal animal1, Animal animal2) {
		
		String animalName1 = animal1.getName().toUpperCase();
		String animalName2 = animal2.getName().toUpperCase();
		
		//ascending order
		return animalName1.compareTo(animalName2);

		}
	};
	
	/**
	 * A StringBuilder to return all information universal to animals
	 */
	public String toString() {
		StringBuilder sb = new StringBuilder(500);
		sb.append("ID: ").append(iD).append(System.lineSeparator());
		sb.append("Name: ").append(name).append(System.lineSeparator());
		sb.append("Original Owners: ").append(originalOwners).append(System.lineSeparator());
		sb.append("Fav food: ").append(favFood).append(System.lineSeparator());
		sb.append("Food per day: ").append(foodPerDay).append(System.lineSeparator());
		return sb.toString();
	}
	
	/**
	 * Note that this only compares equality based on an Animal's name.
	 * @param The other animal to compare against.
	 */
	@Override
	public boolean equals(Object obj) { // Generated by Eclipse to be more robust
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Animal other = (Animal) obj;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		return true;
	}
}
